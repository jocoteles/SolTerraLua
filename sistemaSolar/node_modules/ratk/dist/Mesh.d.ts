/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="webxr" />
import { Mesh, WebXRManager } from 'three';
import { TransformObject } from './TransformObject';
export type XRMeshSet = Set<XRMesh>;
export interface XRMesh {
    meshSpace: XRSpace;
    vertices: Float32Array;
    indices: Float32Array;
    lastChangedTime: number;
    semanticLabel?: string;
}
export declare class RMesh extends TransformObject {
    private _xrMesh;
    needsUpdate: boolean;
    lastUpdatedByRATK: number;
    meshMesh: Mesh;
    boundingRectangleWidth: number;
    boundingRectangleHeight: number;
    constructor(xrMesh: XRMesh);
    get xrMesh(): XRMesh;
    get lastUpdated(): number;
    get semanticLabel(): string;
}
export declare const updateMesh: (mesh: RMesh, xrManager: WebXRManager) => void;
//# sourceMappingURL=Mesh.d.ts.map