"use strict";
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHitTestTargetFromSpace = exports.updateHitTestTarget = exports.HitTestTarget = void 0;
const three_1 = require("three");
class HitTestTarget extends three_1.Group {
    _xrHitTestSource;
    hitTestResultValid = false;
    hitTestResults;
    constructor(xrHitTestSource) {
        super();
        this._xrHitTestSource = xrHitTestSource;
    }
    get xrHitTestSource() {
        return this._xrHitTestSource;
    }
}
exports.HitTestTarget = HitTestTarget;
const updateHitTestTarget = (hitTestTarget, xrManager) => {
    const frame = xrManager.getFrame();
    const refSpace = xrManager.getReferenceSpace();
    hitTestTarget.hitTestResults = frame.getHitTestResults(hitTestTarget.xrHitTestSource);
    hitTestTarget.hitTestResultValid = false;
    if (hitTestTarget.hitTestResults.length > 0) {
        const hitPose = hitTestTarget.hitTestResults[0].getPose(refSpace);
        hitTestTarget.position.set(hitPose.transform.position.x, hitPose.transform.position.y, hitPose.transform.position.z);
        hitTestTarget.quaternion.set(hitPose.transform.orientation.x, hitPose.transform.orientation.y, hitPose.transform.orientation.z, hitPose.transform.orientation.w);
        hitTestTarget.hitTestResultValid = true;
    }
};
exports.updateHitTestTarget = updateHitTestTarget;
const createHitTestTargetFromSpace = async (xrManager, space, offsetOrigin, offsetDirection) => {
    const xrHitTestSource = await xrManager.getSession().requestHitTestSource({
        space: space,
        offsetRay: new XRRay({
            x: offsetOrigin.x,
            y: offsetOrigin.y,
            z: offsetOrigin.z,
            w: 1,
        }, {
            x: offsetDirection.x,
            y: offsetDirection.y,
            z: offsetDirection.z,
            w: 0,
        }),
    });
    const hitTestTarget = new HitTestTarget(xrHitTestSource);
    return hitTestTarget;
};
exports.createHitTestTargetFromSpace = createHitTestTargetFromSpace;
//# sourceMappingURL=HitTestTarget.js.map